/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Taberu API
 * Food ordering organization tool
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
export interface FailureError {
  /** an error identifier */
  code?: number;
  /** a human-readable error message */
  message?: string;
}

export interface UpdateableUser {
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  paypalUsername?: string;
}

export interface Failure {
  error?: FailureError;
}




  type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


  /**
 * Fetch user object
 * @summary Fetch user object
 */
export const getSpecificUser = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Failure>> => {
    return axios.get(
      `/v1/users/${userId}`,options
    );
  }


export const getGetSpecificUserKey = (userId: number,) => [`/v1/users/${userId}`] as const;

    
export type GetSpecificUserQueryResult = NonNullable<Awaited<ReturnType<typeof getSpecificUser>>>
export type GetSpecificUserQueryError = AxiosError<unknown>

/**
 * @summary Fetch user object
 */
export const useGetSpecificUser = <TError = AxiosError<unknown>>(
 userId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSpecificUser>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(userId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSpecificUserKey(userId) : null);
  const swrFn = () => getSpecificUser(userId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Update the user object
 * @summary Update the user object
 */
export const updateUser = (
    userId: number,
    updateableUser: UpdateableUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Failure>> => {
    return axios.patch(
      `/v1/users/${userId}`,
      updateableUser,options
    );
  }



